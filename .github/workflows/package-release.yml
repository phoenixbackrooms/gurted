name: Package Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (will create release from current main branch HEAD)'
        required: true
        default: 'v0.1.0'
      download_artifacts:
        description: 'Download artifacts'
        required: false
        default: 'true'
        type: boolean

jobs:
  package-release:
    name: Package Release
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0

    - name: Verify release is from main branch
      shell: powershell
      run: |
        if ("${{ github.event_name }}" -eq "push") {
          $tagCommit = "${{ github.sha }}"
          Write-Output "Verifying tag commit $tagCommit is in main branch history..."
          
          git checkout main
          $isInMain = git merge-base --is-ancestor $tagCommit main
          if ($LASTEXITCODE -ne 0) {
            Write-Error "ERROR: Tag commit $tagCommit is not in main branch history. Only merged code can be released."
            exit 1
          }
          Write-Output "✓ Tag commit is in main branch history"
        } else {
          Write-Output "✓ Manual release from main branch HEAD"
        }

    - name: Get target commit SHA
      id: get_commit
      shell: powershell
      run: |
        if ("${{ github.event_name }}" -eq "push") {
          $commit = "${{ github.sha }}"
          Write-Output "Using tag commit SHA: $commit"
        } else {
          git checkout main
          $commit = git rev-parse HEAD
          Write-Output "Using main branch HEAD: $commit"
        }
        echo "commit_sha=$commit" >> $env:GITHUB_OUTPUT

    - name: Verify commit exists and is merged
      shell: powershell
      run: |
        $commit = "${{ steps.get_commit.outputs.commit_sha }}"
        
        git checkout main
        $isInMain = git merge-base --is-ancestor $commit main
        if ($LASTEXITCODE -ne 0) {
          Write-Error "ERROR: Commit $commit is not merged into main branch. Release aborted."
          exit 1
        }
        
        Write-Output "✓ Verified commit $commit is merged into main branch"
        
        $commitInfo = git log -1 --format="%H %s" $commit
        Write-Output "Releasing commit: $commitInfo"

    - name: Download GurtCA artifacts
      if: github.event.inputs.download_artifacts == 'true' || github.event_name == 'push'
      uses: dawidd6/action-download-artifact@v6
      with:
        workflow: build-gurtca.yml
        commit: ${{ steps.get_commit.outputs.commit_sha }}
        name_is_regexp: true
        name: gurtca-.*
        path: artifacts/
        if_no_artifact_found: warn
      continue-on-error: true

    - name: Download Gurty artifacts
      if: github.event.inputs.download_artifacts == 'true' || github.event_name == 'push'
      uses: dawidd6/action-download-artifact@v6
      with:
        workflow: build-gurty.yml
        commit: ${{ steps.get_commit.outputs.commit_sha }}
        name_is_regexp: true
        name: gurty-.*
        path: artifacts/
        if_no_artifact_found: warn
      continue-on-error: true

    - name: Download GDExtension artifacts
      if: github.event.inputs.download_artifacts == 'true' || github.event_name == 'push'
      uses: dawidd6/action-download-artifact@v6
      with:
        workflow: build-gdextension.yml
        commit: ${{ steps.get_commit.outputs.commit_sha }}
        name_is_regexp: true
        name: gdextension-.*
        path: artifacts/
        if_no_artifact_found: warn
      continue-on-error: true

    - name: Download Flumi artifacts
      if: github.event.inputs.download_artifacts == 'true' || github.event_name == 'push'
      uses: dawidd6/action-download-artifact@v6
      with:
        workflow: build-flumi.yml
        commit: ${{ steps.get_commit.outputs.commit_sha }}
        name_is_regexp: true
        name: flumi-.*
        path: artifacts/
        if_no_artifact_found: warn
      continue-on-error: true

    - name: List downloaded artifacts
      shell: powershell
      run: |
        Write-Output "Downloaded artifacts:"
        Get-ChildItem -Path artifacts -Recurse -File | Sort-Object FullName

    - name: Download and setup UPX
      if: github.event.inputs.download_artifacts == 'true' || github.event_name == 'push'
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-win64.zip" -OutFile "upx.zip"
        Expand-Archive -Path "upx.zip" -DestinationPath "."

    - name: Compress Windows Flumi binaries with UPX
      if: github.event.inputs.download_artifacts == 'true' || github.event_name == 'push'
      shell: powershell
      run: |
        if (Test-Path "artifacts/flumi-windows") {
          Write-Output "Compressing Windows Flumi binaries..."
          
          New-Item -ItemType Directory -Path "build-scripts/Windows" -Force
          Copy-Item "artifacts/flumi-windows/*" "build-scripts/Windows/" -Force
          
          try {
            & ".\upx-4.2.4-win64\upx.exe" --lzma --best build-scripts/Windows/*.exe build-scripts/Windows/*.dll
            Write-Output "UPX compression completed successfully"
          } catch {
            Write-Output "UPX compression completed with warnings: $($_.Exception.Message)"
          }
          
          Copy-Item "build-scripts/Windows/*" "artifacts/flumi-windows/" -Force
        }

    - name: Download and setup Inno Setup
      if: github.event.inputs.download_artifacts == 'true' || github.event_name == 'push'
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://files.jrsoftware.org/is/6/innosetup-6.5.3.exe" -OutFile "innosetup.exe"
        Start-Process -FilePath ".\innosetup.exe" -ArgumentList "/VERYSILENT", "/NORESTART", "/DIR=C:\InnoSetup" -Wait
        
    - name: Build Windows installer
      if: github.event.inputs.download_artifacts == 'true' || github.event_name == 'push'
      shell: powershell
      run: |
        if (Test-Path "artifacts\flumi-windows") {
          Write-Output "Building Windows installer..."

          New-Item -ItemType Directory -Path "flumi\build-scripts\Windows" -Force | Out-Null

          Get-ChildItem -Path "artifacts\flumi-windows" -File | ForEach-Object {
            Copy-Item -Path $_.FullName -Destination "flumi\build-scripts\Windows" -Force
          }

          New-Item -ItemType Directory -Path "flumi\build-scripts\Windows\installer" -Force | Out-Null

          $issPath = Resolve-Path "flumi\build-scripts\flumi-installer.iss"
          & "C:\InnoSetup\ISCC.exe" $issPath.Path

          $built = Get-ChildItem "flumi\build-scripts\Windows\installer" -Filter "Flumi-Setup-*.exe" -ErrorAction SilentlyContinue
          if ($built) {
            Copy-Item $built.FullName "artifacts\flumi-windows" -Force
            Write-Output "Installer created and copied successfully"
          } else {
            Write-Output "Warning: Installer was not created"
          }
        }

    - name: Prepare release assets
      shell: powershell
      run: |
        New-Item -ItemType Directory -Path "release-assets" -Force
        
        foreach ($platform in @("linux", "windows")) {
          $tempDir = "temp-tools-$platform"
          New-Item -ItemType Directory -Path $tempDir -Force
          
          if (Test-Path "artifacts/gurtca-$platform") {
            Copy-Item "artifacts/gurtca-$platform/*" $tempDir -Force
          }
          
          if (Test-Path "artifacts/gurty-$platform") {
            Copy-Item "artifacts/gurty-$platform/*" $tempDir -Force
          }
          
          $files = Get-ChildItem $tempDir -ErrorAction SilentlyContinue
          if ($files.Count -gt 0) {
            if ($platform -eq "windows") {
              Compress-Archive -Path "$tempDir/*" -DestinationPath "release-assets/gurted-tools-$platform.zip" -Force
            } else {
              if (Get-Command "7z" -ErrorAction SilentlyContinue) {
                & "7z" a -ttar "release-assets/gurted-tools-$platform.tar" "$tempDir/*"
                & "7z" a -tgzip "release-assets/gurted-tools-$platform.tar.gz" "release-assets/gurted-tools-$platform.tar"
                Remove-Item "release-assets/gurted-tools-$platform.tar" -Force
              } else {
                Compress-Archive -Path "$tempDir/*" -DestinationPath "release-assets/gurted-tools-$platform.zip" -Force
              }
            }
          }
          
          Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        foreach ($platform in @("linux", "windows")) {
          if (Test-Path "artifacts/flumi-$platform") {
            Push-Location "artifacts/flumi-$platform"
            
            if ($platform -eq "windows") {
              $installer = Get-ChildItem "Flumi-Setup-*.exe" -ErrorAction SilentlyContinue
              if ($installer) {
                Copy-Item $installer "../../release-assets/" -Force
              }
            } else {
              if (Get-Command "7z" -ErrorAction SilentlyContinue) {
                & "7z" a -ttar "../../release-assets/flumi-$platform.tar" "*"
                & "7z" a -tgzip "../../release-assets/flumi-$platform.tar.gz" "../../release-assets/flumi-$platform.tar"
                Remove-Item "../../release-assets/flumi-$platform.tar" -Force
              } else {
                Compress-Archive -Path "*" -DestinationPath "../../release-assets/flumi-$platform.zip" -Force
              }
            }
            Pop-Location
          }
        }

    - name: Generate checksums
      shell: powershell
      run: |
        $hashFile = "release-assets/checksums.txt"
        $sha256File = "release-assets/SHA256SUMS"
        
        Write-Output "# Gurted Release Checksums" > $hashFile
        Write-Output "Generated on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" >> $hashFile
        Write-Output "Commit SHA: ${{ steps.get_commit.outputs.commit_sha }}" >> $hashFile
        Write-Output "" >> $hashFile
        
        Write-Output "" > $sha256File
        
        $releaseFiles = Get-ChildItem "release-assets" -File | Where-Object { $_.Name -notmatch "^(checksums\.txt|SHA256SUMS)$" }
        
        foreach ($file in $releaseFiles) {
          $hash = Get-FileHash -Path $file.FullName -Algorithm SHA256
          $hashString = $hash.Hash.ToLower()
          $fileName = $file.Name
          
          Write-Output "$fileName" >> $hashFile
          Write-Output "  SHA256: $hashString" >> $hashFile
          Write-Output "" >> $hashFile
          
          Write-Output "$hashString *$fileName" >> $sha256File
        }
        
        Write-Output "Generated checksums for $($releaseFiles.Count) files"

    - name: Get release tag
      id: get_tag
      shell: powershell
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          echo "tag=${{ github.event.inputs.tag }}" >> $env:GITHUB_OUTPUT
        } else {
          $tag = "${{ github.ref }}" -replace "refs/tags/", ""
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
        }

    - name: Generate release notes
      shell: powershell
      run: |
        $tag = "${{ steps.get_tag.outputs.tag }}"
        $commitSha = "${{ steps.get_commit.outputs.commit_sha }}"
        $shortSha = $commitSha.Substring(0, 7)
        
        $releaseNotes = "## Gurted Release $tag`n`n"
        $releaseNotes += "**Built from commit:** [$shortSha](https://github.com/${{ github.repository }}/commit/$commitSha)`n"
        $releaseNotes += "**Branch:** main (verified)`n`n"
        $releaseNotes += "### ⚠️ NOTICE: THESE BUILDS ARE NOT OFFICIAL AND MAY CONTAIN DIFFERENCES FROM UPSTREAM.`n`n"
        $releaseNotes += "🔒 **Security Notice:** This release contains only code that has been merged into the main branch.`n`n"
        $releaseNotes += "This release includes:`n"
        $releaseNotes += "- **GurtCA**: Certificate Authority for TLS certificates`n"
        $releaseNotes += "- **Gurty**: CLI tool for managing GURT protocol servers`n"
        $releaseNotes += "- **Flumi**: The official browser for the GURT ecosystem`n`n"
        $releaseNotes += "### 📦 Downloads`n"
        $releaseNotes += "- `gurted-tools-*.zip`: Contains GurtCA and Gurty binaries`n"
        $releaseNotes += "- `flumi-linux.*`: Contains the Flumi wayfinder application for Linux`n"
        $releaseNotes += "- `Flumi-Setup-*.exe`: Windows installer for Flumi (recommended for Windows users)`n"
        $releaseNotes += "- `checksums.txt`: Human-readable checksums for all files`n"
        $releaseNotes += "- `SHA256SUMS`: Standard format checksums for verification`n`n"
        $releaseNotes += "### 🖥️ Platform Support`n"
        $releaseNotes += "- Linux (x86_64)`n"
        $releaseNotes += "- Windows (x86_64)`n`n"
        $releaseNotes += "### 📋 SHA256 Checksums`n"
        $releaseNotes += "``````n"
        
        if (Test-Path "release-assets/SHA256SUMS") {
          $checksums = Get-Content "release-assets/SHA256SUMS"
          $releaseNotes += ($checksums -join "`n")
        }
        
        $releaseNotes += "`n``````n`n"
        $releaseNotes += "For documentation and usage instructions, visit [docs.gurted.com](https://docs.gurted.com)"
        
        $releaseNotes | Out-File -FilePath "release-notes.md" -Encoding UTF8
        Write-Output "Release notes generated"

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: Gurted ${{ steps.get_tag.outputs.tag }}
        body_path: release-notes.md
        files: release-assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
